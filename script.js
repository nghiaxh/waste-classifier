const SMALL_MODEL = "N3iLxQA7A";
const LARGE_MODEL = "paTmySuYs";
const MODEL_URL = `https://teachablemachine.withgoogle.com/models/${LARGE_MODEL}/`;

let model = null;
let currentImage = null;
let webcam = null;

const resultsDiv = document.getElementById('results');
const predictionsDiv = document.getElementById('predictions');
const notification = document.getElementById('notification');

document.addEventListener('DOMContentLoaded', function () {
    initializeApp();
});

async function initializeApp() {
    notification.innerHTML = "ƒêang t·∫£i m√¥ h√¨nh...";
    model = await tmImage.load(MODEL_URL + 'model.json', MODEL_URL + 'metadata.json');
    notification.innerHTML = "M√¥ h√¨nh ƒë√£ s·∫µn s√†ng!";
    console.log("M√¥ h√¨nh ƒë√£ s·∫µn s√†ng!");
    setTimeout(() => {
        notification.style.display = "none";
    }, 4000);
}

document.getElementById('image-upload').addEventListener('change', function (event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            showImage(e.target.result);
        };
        reader.readAsDataURL(file);
    }
});

document.getElementById('start-camera').addEventListener('click', async function () {
    try {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        let videoConfig;

        if (isMobile) {
            videoConfig = {
                facingMode: "environment"
            };
        } else {
            videoConfig = {
                width: { ideal: 1280 },
                height: { ideal: 720 }
            };
        }

        const stream = await navigator.mediaDevices.getUserMedia({
            video: videoConfig
        });

        const video = document.createElement('video');
        video.srcObject = stream;
        video.autoplay = true;
        video.style.width = '100%';
        video.style.maxWidth = '300px';

        const container = document.getElementById('webcam-container');
        container.innerHTML = '';
        container.appendChild(video);

        const captureBtn = document.createElement('button');
        captureBtn.textContent = 'üì∏ Ch·ª•p';
        captureBtn.className = 'btn';
        captureBtn.style.marginTop = '10px';
        captureBtn.onclick = () => captureImage(video);
        container.appendChild(captureBtn);

        webcam = { video, stream };

        document.getElementById('start-camera').classList.add('hidden');
        document.getElementById('stop-camera').classList.remove('hidden');
    } catch (error) {
        alert('Kh√¥ng th·ªÉ truy c·∫≠p camera! Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p.');
    }
});

document.getElementById('stop-camera').addEventListener('click', function () {
    if (webcam && webcam.stream) {
        webcam.stream.getTracks().forEach(track => track.stop());
        document.getElementById('webcam-container').innerHTML = '';

        document.getElementById('start-camera').classList.remove('hidden');
        document.getElementById('stop-camera').classList.add('hidden');

        webcam = null;
    }
});

function captureImage(video) {
    const canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0);

    const imageData = canvas.toDataURL('image/jpeg');
    showImage(imageData);

    document.getElementById('stop-camera').click();
}

function showImage(imageSrc) {
    currentImage = imageSrc;

    const container = document.getElementById('image-container');
    container.innerHTML = `<img src="${imageSrc}" alt="·∫¢nh ƒë·ªÉ ph√¢n lo·∫°i">`;

    document.getElementById('image-section').classList.remove('hidden');
    document.getElementById('classify-btn').classList.remove('hidden');
}

document.getElementById('classify-btn').addEventListener('click', async function () {
    if (!currentImage) {
        alert('Vui l√≤ng ch·ªçn ·∫£nh ho·∫∑c ch·ª•p ·∫£nh t·ª´ camera tr∆∞·ªõc khi ph√¢n lo·∫°i!');
        return;
    }
    if (!model) {
        alert('M√¥ h√¨nh ch∆∞a s·∫µn s√†ng! Vui l√≤ng ƒë·ª£i ho·∫∑c ki·ªÉm tra l·∫°i.');
        return;
    }

    predictionsDiv.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p>ƒêang ph√¢n t√≠ch...</p>
        </div>
    `;
    resultsDiv.classList.add('show');

    const imgElement = document.createElement('img');
    imgElement.src = currentImage;
    imgElement.width = 224;
    imgElement.height = 224;

    imgElement.onload = async function () {
        try {
            const predictions = await model.predict(imgElement);

            const results = predictions.map(pred => ({
                name: pred.className,
                confidence: Math.round(pred.probability * 100)
            })).sort((a, b) => b.confidence - a.confidence);

            showResults(results);
        } catch (error) {
            console.error('L·ªói khi ph√¢n lo·∫°i:', error);
            predictionsDiv.innerHTML = '<p style="color: red;">C√≥ l·ªói x·∫£y ra khi ph√¢n lo·∫°i ·∫£nh!</p>';
        }
    };

    imgElement.onerror = function () {
        predictionsDiv.innerHTML = '<p style="color: red;">Kh√¥ng th·ªÉ t·∫£i ·∫£nh!</p>';
    };
});

function showResults(results) {
    const predictionsDiv = document.getElementById('predictions');
    let html = '';
    results.forEach((result, index) => {
        const isTop = index === 0;
        html += `
            <div class="result-item ${isTop ? 'top' : ''}">
                <span>${result.name}</span>
                <span class="confidence">${result.confidence}%</span>
            </div>
        `;
    });

    const topResult = results[0];

    const advice = getAdvice(topResult.name);
    const color = getColor(topResult.name);

    html += `
        <div style="background: white; padding: 15px; border-radius: 6px; margin-top: 15px; border-left: 4px solid ${color};">
            <strong>üí° G·ª£i √Ω x·ª≠ l√Ω:</strong><br>
            ${advice}
        </div>
    `;

    predictionsDiv.innerHTML = html;
}

function getAdvice(wasteType) {
    const advice = {
        'R√°c t√°i ch·∫ø': 'R·ª≠a s·∫°ch v√† ƒë·ªÉ kh√¥ c√°c v·∫≠t li·ªáu t√°i ch·∫ø nh∆∞ chai nh·ª±a, lon, gi·∫•y, b√¨a c·ª©ng. Nh·ªõ th√°o n·∫Øp chai v√† √©p d·∫πp n·∫øu c√≥ th·ªÉ.',
        'R√°c h·ªØu c∆°': 'G·ªìm th·ª©c ƒÉn th·ª´a, v·ªè rau c·ªß, l√° c√¢y,... C√≥ th·ªÉ d√πng ƒë·ªÉ ·ªß ph√¢n compost t·∫°i nh√† ho·∫∑c l√†m ph√°n b√≥n cho c√¢y.',
        'R√°c kh√¥ng th·ªÉ t√°i ch·∫ø': 'G·ªìm t√∫i nilon b·∫©n, gi·∫•y lau, g·ªëm v·ª°, kh·∫©u trang... ƒê√≥ng g√≥i ch·∫Øc ch·∫Øn tr∆∞·ªõc khi b·ªè, ƒë·∫∑c bi·ªát v·ªõi g·ªëm v·ª° ho·∫∑c v·∫≠t s·∫Øc nh·ªçn.',
        'R√°c ƒë·ªôc h·∫°i': 'Bao g·ªìm pin, b√≥ng ƒë√®n, h√≥a ch·∫•t, thi·∫øt b·ªã ƒëi·ªán t·ª≠ h·ªèng... H√£y mang ƒë·∫øn ƒëi·ªÉm thu gom r√°c ƒë·ªôc h·∫°i g·∫ßn nh·∫•t.'
    };
    return advice[wasteType] || 'X·ª≠ l√Ω theo quy ƒë·ªãnh ƒë·ªãa ph∆∞∆°ng';
}

function getColor(wasteType) {
    const colors = {
        'R√°c h·ªØu c∆°': '#cc9900',
        'R√°c t√°i ch·∫ø': '#4CAF50',
        'R√°c kh√¥ng th·ªÉ t√°i ch·∫ø': '#aaaaaa',
        'R√°c ƒë·ªôc h·∫°i': '#FF5722'
    };
    return colors[wasteType] || '#666';
}